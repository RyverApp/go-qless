// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package qless

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComRyverappGoQless(in *jlexer.Lexer, out *jobData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jid":
			out.JID = string(in.String())
		case "klass":
			out.Class = string(in.String())
		case "state":
			out.State = string(in.String())
		case "queue":
			out.Queue = string(in.String())
		case "worker":
			out.Worker = string(in.String())
		case "tracked":
			out.Tracked = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "expires":
			out.Expires = int64(in.Int64())
		case "retries":
			out.Retries = int(in.Int())
		case "remaining":
			out.Remaining = int(in.Int())
		case "data":
			out.Data = string(in.String())
		case "tags":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tags).UnmarshalJSON(data))
			}
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]History, 0, 1)
					} else {
						out.History = []History{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v1 History
					(v1).UnmarshalEasyJSON(in)
					out.History = append(out.History, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failure":
			if in.IsNull() {
				in.Skip()
				out.Failure = nil
			} else {
				if out.Failure == nil {
					out.Failure = new(Failure)
				}
				(*out.Failure).UnmarshalEasyJSON(in)
			}
		case "dependents":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Dependents).UnmarshalJSON(data))
			}
		case "dependencies":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Dependencies).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless(out *jwriter.Writer, in jobData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jid\":"
		out.RawString(prefix[1:])
		out.String(string(in.JID))
	}
	{
		const prefix string = ",\"klass\":"
		out.RawString(prefix)
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"queue\":"
		out.RawString(prefix)
		out.String(string(in.Queue))
	}
	{
		const prefix string = ",\"worker\":"
		out.RawString(prefix)
		out.String(string(in.Worker))
	}
	{
		const prefix string = ",\"tracked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tracked))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		out.Int64(int64(in.Expires))
	}
	{
		const prefix string = ",\"retries\":"
		out.RawString(prefix)
		out.Int(int(in.Retries))
	}
	{
		const prefix string = ",\"remaining\":"
		out.RawString(prefix)
		out.Int(int(in.Remaining))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tags {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.History {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Failure != nil {
		const prefix string = ",\"failure\":"
		out.RawString(prefix)
		(*in.Failure).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dependents\":"
		out.RawString(prefix)
		if in.Dependents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Dependents {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		if in.Dependencies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Dependencies {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jobData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jobData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jobData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jobData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless(l, v)
}
func easyjson6a975c40DecodeGithubComRyverappGoQless1(in *jlexer.Lexer, out *StatData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "histogram":
			if in.IsNull() {
				in.Skip()
				out.Histogram = nil
			} else {
				in.Delim('[')
				if out.Histogram == nil {
					if !in.IsDelim(']') {
						out.Histogram = make([]int64, 0, 8)
					} else {
						out.Histogram = []int64{}
					}
				} else {
					out.Histogram = (out.Histogram)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int64
					v10 = int64(in.Int64())
					out.Histogram = append(out.Histogram, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mean":
			out.Mean = float64(in.Float64())
		case "std":
			out.Std = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless1(out *jwriter.Writer, in StatData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"histogram\":"
		out.RawString(prefix)
		if in.Histogram == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Histogram {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mean\":"
		out.RawString(prefix)
		out.Float64(float64(in.Mean))
	}
	{
		const prefix string = ",\"std\":"
		out.RawString(prefix)
		out.Float64(float64(in.Std))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless1(l, v)
}
func easyjson6a975c40DecodeGithubComRyverappGoQless2(in *jlexer.Lexer, out *QueueStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "failed":
			out.Failed = int64(in.Int64())
		case "failures":
			out.Failures = int64(in.Int64())
		case "retries":
			out.Retries = int64(in.Int64())
		case "run":
			(out.Run).UnmarshalEasyJSON(in)
		case "wait":
			(out.Wait).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless2(out *jwriter.Writer, in QueueStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"failed\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Failed))
	}
	{
		const prefix string = ",\"failures\":"
		out.RawString(prefix)
		out.Int64(int64(in.Failures))
	}
	{
		const prefix string = ",\"retries\":"
		out.RawString(prefix)
		out.Int64(int64(in.Retries))
	}
	{
		const prefix string = ",\"run\":"
		out.RawString(prefix)
		(in.Run).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"wait\":"
		out.RawString(prefix)
		(in.Wait).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueueStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueueStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueueStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueueStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless2(l, v)
}
func easyjson6a975c40DecodeGithubComRyverappGoQless3(in *jlexer.Lexer, out *QueueInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "paused":
			out.Paused = bool(in.Bool())
		case "waiting":
			out.Waiting = int(in.Int())
		case "running":
			out.Running = int(in.Int())
		case "stalled":
			out.Stalled = int(in.Int())
		case "scheduled":
			out.Scheduled = int(in.Int())
		case "recurring":
			out.Recurring = int(in.Int())
		case "depends":
			out.Depends = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless3(out *jwriter.Writer, in QueueInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"paused\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paused))
	}
	{
		const prefix string = ",\"waiting\":"
		out.RawString(prefix)
		out.Int(int(in.Waiting))
	}
	{
		const prefix string = ",\"running\":"
		out.RawString(prefix)
		out.Int(int(in.Running))
	}
	{
		const prefix string = ",\"stalled\":"
		out.RawString(prefix)
		out.Int(int(in.Stalled))
	}
	{
		const prefix string = ",\"scheduled\":"
		out.RawString(prefix)
		out.Int(int(in.Scheduled))
	}
	{
		const prefix string = ",\"recurring\":"
		out.RawString(prefix)
		out.Int(int(in.Recurring))
	}
	{
		const prefix string = ",\"depends\":"
		out.RawString(prefix)
		out.Int(int(in.Depends))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueueInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueueInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueueInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueueInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless3(l, v)
}
func easyjson6a975c40DecodeGithubComRyverappGoQless4(in *jlexer.Lexer, out *History) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "when":
			out.When = int64(in.Int64())
		case "q":
			out.Queue = string(in.String())
		case "what":
			out.What = string(in.String())
		case "worker":
			out.Worker = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless4(out *jwriter.Writer, in History) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"when\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.When))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Queue))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		out.String(string(in.What))
	}
	{
		const prefix string = ",\"worker\":"
		out.RawString(prefix)
		out.String(string(in.Worker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v History) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v History) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *History) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *History) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless4(l, v)
}
func easyjson6a975c40DecodeGithubComRyverappGoQless5(in *jlexer.Lexer, out *Failure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "when":
			out.When = int64(in.Int64())
		case "worker":
			out.Worker = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComRyverappGoQless5(out *jwriter.Writer, in Failure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"when\":"
		out.RawString(prefix)
		out.Int64(int64(in.When))
	}
	{
		const prefix string = ",\"worker\":"
		out.RawString(prefix)
		out.String(string(in.Worker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Failure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComRyverappGoQless5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Failure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComRyverappGoQless5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Failure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComRyverappGoQless5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Failure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComRyverappGoQless5(l, v)
}
